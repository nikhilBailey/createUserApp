import {Input, Label} from "reactstrap"
import {useEffect, useState} from "react"

/**
 * Styled flexible label-input group to be paired with the InputBox.js/useInput hook
 * @param props.label string to be displayed on the label of this label-input group
 * @param props.toBind binding object to control the input, needs 2 fields. Auto generated by useInput custom hook.
 * @param props.toBind.value value of the input
 * @param props.toBind.onChange function to be called with the 'event' object any time the value of the input changes
 * @param props.children components to be placed following the input
 * @param props.onClick optional onClick handler for input box
 * @returns {JSX.Element} label-input group with styling
 * @constructor
 */
const InputBox = (props) => {

    const handleOnClick = () => {
        if (props.onClick) {
            props.onClick()
        }
    }

    const eventPreventer = (e) => {e.preventDefault();return false}

    const pasteProps = props.noPaste ? {onPaste : eventPreventer, onCopy: eventPreventer}: {}

    return (
        <div style={{display: "flex", gap: 10}}>
            <Label style={props.disabled ? {pointerEvents: "none", display: "none"} : {}}>{props.label}</Label>
            <Input id={props.id} style={{width: props.width, height: 30, ...(props.border ? {borderColor: "red"} : {}), ...(props.disabled ? {pointerEvents: "none", display: "none"} : {})}} onClick={handleOnClick} type={`${props.inputType}`} {...pasteProps} {...props.toBind} />
            {props.children}
        </div>
    )
}

/**
 * Shared state and binding generator for Inputbox.js/InputBox. To be paired with an InputBox JSX component
 * @param initialValue value to start the input at and to reset the input to when reset
 * @param handler custom middleware mask (function) that is called inside the setter for value. Takes 2 parameters: the previous state of the input, and the new state the input wants to change to. Should return the state the input needs to become.
 * @returns {[unknown,((value: unknown) => void),(function(): void),{onChange: onChange, value: unknown}]} [value, setValue, resetValue, bindValue] Array of length 4 (to be destructured) containing the value of the input, the setter for the input's value, a function to reset the input, and an object to be passed into the props of the input box using spread syntax.
 */
const useInput = (initialValue, handler) => {
    const [value, setValue] = useState(initialValue)

    return [
        value,
        setValue,
        () => setValue(initialValue),
        {
            value,
            onChange: event => {
                setValue(prev => handler(prev, event.target.value))
            }
        }
    ]
}

export { useInput, InputBox }